package ${package.Controller};

##自定义Controller模板
##可对着备份的第一份UserController看

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.springframework.dao.DataAccessException;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import java.util.List;

//导入包
import com.example.standard_manage_back.common.Constants;
import com.example.standard_manage_back.common.Result;
import com.example.standard_manage_back.exception.ServiceException;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    //导入service包
    @Resource
    private ${table.serviceName} ${table.entityPath}Service;

    //save即做到新增又做到更新
    @PostMapping
    public Result save(@RequestBody ${entity} ${table.entityPath}){    //RequestBody将前台json对象转为后台java对象
        //新增或者更新
        return Result.success(${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
    }

    //新增
    @PostMapping("/add")
    public Result add(@RequestBody ${entity} ${table.entityPath}) {
        //新增
        try {
            return Result.success("添加成功",${table.entityPath}Service.save(${table.entityPath}));
        } catch (DataAccessException e) {
            return Result.error(Constants.PARAM_HAS_EXISTED,"该item已存在");
        }
    }

    //更新
    @PostMapping("/update")
    public Result update(@RequestBody ${entity} ${table.entityPath}){
        //更新
        return Result.success("更新成功",${table.entityPath}Service.updateById(${table.entityPath}));
    }

    //查询所有数据
    @GetMapping
    public Result findAll(){
        return Result.success("获取成功",${table.entityPath}Service.list());
    }

    //根据id查询
    @GetMapping("/{id}")
    public Result findOne(@PathVariable Integer id) {
        return Result.success("获取成功",${table.entityPath}Service.getById(id));
    }

    //分页查询
    @GetMapping("/getPage")
    public Result findPage(@RequestParam Integer pageNum,
                                    @RequestParam Integer pageSize) {
        QueryWrapper<${entity}> queryWrapper=new QueryWrapper<>();
        return Result.success("获取成功",${table.entityPath}Service.page(new Page<>(pageNum, pageSize), queryWrapper));
    }

    //删除单个
    @DeleteMapping("/{id}")
    public Result delete(@PathVariable Integer id){
        try{
            ${table.entityPath}Service.removeById(id);
            return Result.success("删除成功");
        }catch (Exception e){
            throw new ServiceException(Constants.CODE_ERROR,"删除失败");   //抛出异常
        }
    }

    //删除多个
    @PostMapping("/delete/batch")
    public Result deleteBatch(@RequestBody List<Integer> ids){
        try{
            ${table.entityPath}Service.removeByIds(ids);
            return Result.success("批量删除成功");
        }catch (Exception e){
            throw new ServiceException(Constants.CODE_ERROR,"批量删除失败");   //抛出异常
        }
    }
}

#end